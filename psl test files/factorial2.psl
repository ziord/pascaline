PROGRAM factorial;
var 
    x : integer;
    n : integer;
    h : integer;
    nx : boolean;
    r : real;
    st : string;
    ch : char;
var a1, a2 : integer;
var a3 : real;

func factorial_(x:integer;): integer;
    var n : integer;
    func writer(x : integer;);
        begin
            writeln(x);
        end;
    begin
        n := x;
        if x = 0 then
            factorial_ ret 1
        else
            begin
                factorial_ ret (n * factorial_(x-1)) //sweet recursion
            end;
    end;
func dummy(num : integer;): integer;
var x : integer;
begin
    x := 312;
    dummy ret 45;
end;

func fibonacci(x:integer;): integer;
    var n : integer;
    begin
        if x < 2 then
            fibonacci ret 1
        else
            begin
                fibonacci ret fibonacci(x-1) + fibonacci(x-2);
            end;
    end;
    
begin
    r := clock();
    x := factorial_(11);
    writeln(x);
    writeln(clock()-r);
    st := "Quite long dont you think";
    ch := 'a';
    writeln("Quite long dont you think,", ch);
end.

comm:<*
bug fixes -- TODO:
1 liner else statements -- not a problem if it's the last statement in the code
writeln() and write() function work without arguments --fixed
declaration of variables after function declarations -- conforms to language's order of declarations
multi-assignments does not work properly -- works properly actually
*>